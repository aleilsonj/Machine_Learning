trControl = trainControl(method = "cv", number = 5),
tuneGrid = hyperparameters)
# Acessar os melhores hiperparâmetros encontrados
melhores_hiperparametros <- modelo_rf$bestTune
melhores_hiperparametros
modelo_rf
# Definir o grid de hiperparâmetros para busca
tuningGrid <- expand.grid(mtry = c(2, 4, 6),
ntree = c(100, 200, 300),
maxnodes = c(10, 20, 30),
minsplit = c(2, 5, 10),
minbucket = c(1, 3, 5),
maxdepth = c(5, 10, 15))
# Criar o modelo Random Forest com busca de hiperparâmetros
modelo_rf <- train(STATUS ~ .,
data = dados_treinamento,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = hyperparameters)
# Acessar os melhores hiperparâmetros encontrados
melhores_hiperparametros <- modelo_rf$bestTune
melhores_hiperparametros
modelo_rf
# Definir o grid de hiperparâmetros para busca
tuningGrid <- expand.grid(mtry = c(2, 4, 6),
ntree = c(100, 200, 300),
maxnodes = c(10, 20, 30),
minsplit = c(2, 5, 10),
minbucket = c(1, 3, 5),
maxdepth = c(5, 10, 15))
# Criar o modelo Random Forest com busca de hiperparâmetros
modelo_rf <- train(STATUS ~ .,
data = dados_treinamento,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = hyperparameters)
# Acessar os melhores hiperparâmetros encontrados
melhores_hiperparametros <- modelo_rf$bestTune
melhores_hiperparametros
# Definir o grid de hiperparâmetros para busca
tuningGrid <- expand.grid(mtry = c(1, 2, 3, 4, 6),
ntree = c(100, 200, 300, 400, 500)
)
# Criar o modelo Random Forest com busca de hiperparâmetros
modelo_rf <- train(STATUS ~ .,
data = dados_treinamento,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = hyperparameters)
# Criar o modelo Random Forest com busca de hiperparâmetros
modelo_rf <- train(STATUS ~ .,
data = dados_treinamento,
method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = tuningGrid)
View(hyperparameters)
# Realizar a busca de hiperparâmetros com o tuneRF
tuned_rf <- tuneRF(dados_treinamento[, -c("STATUS")], dados_treinamento$STATUS,
stepFactor = 0.5,
ntreeTry = 500,
improve = 1e-5)
# Realizar a busca de hiperparâmetros com o tuneRF
tuned_rf <- tuneRF(dados_treinamento[,-c("STATUS")], dados_treinamento$STATUS,
stepFactor = 0.5,
ntreeTry = 500,
improve = 1e-5)
# Naive bayes
modelo_nb <- naiveBayes(STATUS ~ .,
data = dados_treinamento)
# Fazer previsões nos dados de teste
predict_nb <- predict(modelo_nb, newdata = dados_teste)
# Calcular a acurácia
acuracia_nb <- confusionMatrix(predict_nb,
dados_teste$STATUS)$overall['Accuracy']
acuracia_nb
# Obter a matriz de confusão
matriz_confusaonb <- confusionMatrix(predict_nb, dados_teste$STATUS)
matriz_confusaonb
plot2
# 6.
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Decibel (dB)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Decibel")
plot3
ggplot(df, aes(x = DESIBEL, fill = STATUS))
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.5)
View(df)
# Carregando dataset
df <- read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx")
# 6.
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Decibel (dB)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Decibel")
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Decibel (dB)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Decibel")
rm(list = ls())
# Pacotes utilizados
library(readxl)
library(ggplot2)
library(reshape2)
library(dplyr)
library(e1071)
library(randomForest)
library(lattice)
library(caret)
# Carregando dataset
df <- read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx")
# Verificando a existência de valores NA em df
any(is.na(df)) # Não foi encontrado valores NA em df
# Verificando as classes da variáveis de df
str(df)
# Nomes das variáveis a serem convertidas
vetores <- c("SIZE", "STATUS", "FUEL")
# Loop para converter os vetores para a classe "factor"
for (vetor in vetores) {
df[[vetor]] <- as.factor(df[[vetor]])
}
# Verificando as classes da variáveis de df
str(df)
# Selecionando variáveis catégoricas
cat <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
# Selecionando numéricas
num <- names(df)[sapply(df, is.numeric)]
# ANÁLISE EXPLORATÓRIA DOS DADOS
## Histograma - Desibel
hist(df$DESIBEL,
main = "Histograma Decibel",
xlab = "Desibel (dB)", ylab = "Freq. Absoluta",
col = c("blue"),
border = FALSE,
xlim = c(70,118), ylim = c(0,2500),
labels = TRUE)
# Boxplot - Desibel
boxplot(df$DESIBEL,
main = "Boxplot - Desibel",
ylab = "Desibel (dB)",
col = "red")
summary(df$DESIBEL)
## Histograma - AirFlow
hist(df$AIRFLOW,
main = "Fluxo de Ar durante o Experimento",
xlab = "Fluxo de Ar (m/s)", ylab = "Freq. Absoluta",
col = c("blue"),
border = FALSE,
xlim = c(0,18), ylim = c(0,2200),
labels = TRUE)
# Boxplot - Airflow
boxplot(df$AIRFLOW,
main = "Boxplot - Fluxo de Ar",
ylab = "Fluxo de Ar (m/s)",
col = "red")
summary(df$AIRFLOW)
## Histograma - Frequency
hist(df$FREQUENCY,
main = "Frequência Durante o Experimento",
xlab = "Frequência (Hz)", ylab = "Freq. Absoluta",
col = c("blue"),
border = FALSE,
xlim = c(0,80), ylim = c(0,2000),
labels = TRUE)
# Boxplot - Frenquecy
boxplot(df$FREQUENCY,
main = "Boxplot - Frenquência",
ylab = "Frenquência (Hz)",
col = "red")
summary(df$FREQUENCY)
# Histograma - Distance
hist(df$DISTANCE,
main = "Distância durante o Experimento",
xlab = "Distância (cm)", ylab = "Freq. Absoluta",
col = c("blue"),
border = FALSE,
xlim = c(0,200), ylim = c(0,2000),
labels = TRUE)
# Boxplot - DISTANCE
boxplot(df$DISTANCE,
main = "Boxplot - Distância",
ylab = "Distância (Hz)",
col = "red")
summary(df$DISTANCE)
# criando tabela cruzada de frenquência entre SIZE e STATUS
tab <- table(df$SIZE, df$STATUS)
# Editando os cabeçalhos das colunas
colnames(tab) <- c("Falha", "Sucesso")
# Visualizando a tabela com os cabeçalhos editados
print(tab)
# obtendo a tabela de frequências relativas fixando as colunas da tabela
tab2 = prop.table(tab, margin=2)
plot(tab2,  xlab = "Tamanho do Combustivel", ylab="Resultado do Experimento",
col=c("lightblue","darkblue"),
main=c("Grafico de mosaicos para as variáveis tipo",
"Size e Status"))
# criando tabela cruzada de frenquência entre FUEL e STATUS
tab1 <- table(df$FUEL, df$STATUS)
# Editando os cabeçalhos das colunas
colnames(tab1) <- c("Falha", "Sucesso")
# Editando os cabeçalhos das linhas
rownames(tab1) <- c("Gasolina", "Querosene", "GLP", "Thinner")
# Visualizando a tabela com os cabeçalhos editados
print(tab1)
# obtendo a tabela de frequências relativas fixando as colunas da tabela
tab1 = prop.table(tab1, margin=2)
plot(tab1,  xlab = "Tipo de Combustivel", ylab="Resultado do Experimento",
col=c("lightblue","darkblue"),
main=c("Grafico de mosaicos para as variáveis tipo",
"Fuel e Status"))
# Plot - 1
plot1 <- ggplot(df, aes(x = DISTANCE, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Distância", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Densidade de Sucesso e Falha por Distância")
plot1
# Plot - 2
plot2 <- ggplot(df, aes(x = AIRFLOW, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Fluxo de Ar", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Densidade de Sucesso e Falha por Fluxo de Ar")
plot2
# Plot - 3
plot3 <- ggplot(df, aes(x = FREQUENCY, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Frequência (Hz)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Frequência (Hz)")
plot3
# 6.
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Decibel (dB)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Decibel")
# Calcula a matriz de correlação
matrizcorr <- cor(df[,num])
matriz_melt <- melt(matrizcorr)
# Definir cores personalizadas
colors <- c("#FFFFFF", "#FF0000")
# Plotar o heatmap com texto
ggplot(matriz_melt, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradientn(colors = colors) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(),
legend.position = "right",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
labs(x = NULL, y = NULL) +
ggtitle("Heatmap Correlação")
unique(df$FUEL)
# Plotar o heatmap com texto
ggplot(matriz_melt, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradientn(colors = colors) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(),
legend.position = "right",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
labs(x = NULL, y = NULL) +
ggtitle("Heatmap Correlação")
# 6.
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Decibel (dB)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Decibel")
barplot(acuracias, names.arg = modelos,
col = color(4),
ylim = c(0.0,1.0),
xlab = "Modelos",
ylab = "Acurácia",
main = "Acurácia dos Modelos")
modelos <- c("GLM", "KNN", "Naive Bayes", "Random Forest")
acuracias <- c(acuracia_glm, knnacuracia, acuracia_nb, acuracia_rf)
color <- colorRampPalette(c("darkblue","lightblue"))
# Calcula a matriz de correlação
matrizcorr <- cor(df[,num])
matriz_melt <- melt(matrizcorr)
# Definir cores personalizadas
colors <- c("#FFFFFF", "#FF0000")
# Plotar o heatmap com texto
ggplot(matriz_melt, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradientn(colors = colors) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(),
legend.position = "right",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
labs(x = NULL, y = NULL) +
ggtitle("Heatmap Correlação")
unique(df$FUEL)
# Transformando a coluna em números
df$FUEL <- recode(df$FUEL,
"gasoline" = 1,
"kerosene" = 2,
"thinner" = 3,
"lpg" = 4)
# Padronização da variáveis numéricas
df[, num] <- scale(df[, num])
# dividindo dados em treino e teste
set.seed(10)
indice_treinamento <- createDataPartition(df$FUEL, p = 0.7, list = FALSE)
dados_treinamento <- df[indice_treinamento,]
dados_teste <- df[-indice_treinamento,]
# variáveis importantes de acordo com o RF
modelo <- randomForest(STATUS ~ . ,
data = df,
ntree = 100, nodesize = 10,
importance = TRUE)
varImpPlot(modelo)
# Treinar o modelo de regressão logística
glm_v1 <- train(STATUS ~ .,
data = dados_treinamento,
method = "glm",
family = "binomial")
# Fazer previsões nos dados de teste
previsoes_glm_v1 <- predict(glm_v1, newdata = dados_teste)
# Calcular a acurácia
acuracia_glm_v1 <- confusionMatrix(previsoes_glm_v1, dados_teste$STATUS)$overall['Accuracy']
# Obter a matriz de confusão
matriz_confusao_glm <- confusionMatrix(previsoes_glm_v1, dados_teste$STATUS)
# Segundo modelo GLM
modelo_glm_2 <- train(STATUS ~ SIZE + FUEL+ DESIBEL + AIRFLOW + FREQUENCY,
data = dados_treinamento,
method = "glm",
family = "binomial")
# Fazer previsões nos dados de teste
previsoes_glm_2 <- predict(modelo_glm_2, newdata = dados_teste)
# Calcular a acurácia
acuracia_glm_2 <- confusionMatrix(previsoes_glm_2, dados_teste$STATUS)$overall['Accuracy']
# Obter a matriz de confusão
matriz_confusao_glm_2 <- confusionMatrix(previsoes_glm_2, dados_teste$STATUS)
# Modelo de Classificação KNN
# Arquivo de controle
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
# Criando Modelo KNN
knn_v1 <- train(STATUS ~ .,
data = dados_treinamento,
method = "knn",
trControl = ctrl,
tuneLength = 20)
# Plot
plot(knn_v1)
# previsões nos dados de teste
knnpredict <- predict(knn_v1, newdata = dados_teste)
# Calculo da acurácia
knnacuracia <- confusionMatrix(knnpredict, dados_teste$STATUS)$overall['Accuracy']
# matriz de confusão
knnmatriz_confusao <- confusionMatrix(knnpredict, dados_teste$STATUS)
# Naive bayes
modelo_nb <- naiveBayes(STATUS ~ .,
data = dados_treinamento)
# Fazer previsões nos dados de teste
predict_nb <- predict(modelo_nb, newdata = dados_teste)
# Calcular a acurácia
acuracia_nb <- confusionMatrix(predict_nb,
dados_teste$STATUS)$overall['Accuracy']
# Obter a matriz de confusão
matriz_confusaonb <- confusionMatrix(predict_nb, dados_teste$STATUS)
# NB v2
# Create the tuning grid
tuningGrid <- expand.grid(laplace = c(0, 0.5, 1),
usekernel = c(FALSE, TRUE),
adjust = 0.1)
# Train the Naive Bayes model with hyperparameter tuning
modelo_nb <- train(STATUS ~ .,
data = dados_treinamento,
method = "naive_bayes",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = tuningGrid)
# Access the best hyperparameters found
best_hiperparameters <- modelo_nb$bestTune
# Random Forest
modelo_rf <- randomForest(STATUS ~ .,
data = dados_treinamento,
ntree = 500,
mtry = 5)
# Fazer previsões nos dados de teste
predict_rf <- predict(modelo_rf, newdata = dados_teste)
# Calcular a acurácia
acuracia_rf <- confusionMatrix(predict_rf, dados_teste$STATUS)$overall['Accuracy']
# Obter a matriz de confusão
matriz_confusaorf <- confusionMatrix(predict_rf, dados_teste$STATUS)
modelos <- c("GLM", "KNN", "Naive Bayes", "Random Forest")
acuracias <- c(acuracia_glm, knnacuracia, acuracia_nb, acuracia_rf)
acuracias <- c(acuracia_glm_v1, knnacuracia, acuracia_nb, acuracia_rf)
barplot(acuracias, names.arg = modelos,
col = color(4),
ylim = c(0.0,1.0),
xlab = "Modelos",
ylab = "Acurácia",
main = "Acurácia dos Modelos")
modelos <- c("GLM", "KNN", "NBayes", "R.Forest")
acuracias <- c(acuracia_glm_v1, knnacuracia, acuracia_nb, acuracia_rf)
color <- colorRampPalette(c("darkblue","lightblue"))
barplot(acuracias, names.arg = modelos,
col = color(4),
ylim = c(0.0,1.0),
xlab = "Modelos",
ylab = "Acurácia",
main = "Acurácia dos Modelos")
