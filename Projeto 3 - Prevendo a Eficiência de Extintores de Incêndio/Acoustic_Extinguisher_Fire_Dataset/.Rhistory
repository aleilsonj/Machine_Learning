theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
)+
ggtitle("Histograma AirFlow")
# histograma - Desibel
ggplot(df, aes(x = DESIBEL)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(x = "Valores", y = "Frequência") +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
)+
ggtitle("Histograma Desibel")
# criando tabela cruzada de frenquência entre SIZE e STATUS
tab <- table(df$SIZE, df$STATUS)
addmargins(tab)
# tabela cruzada de frenquência entre SIZE e STATUS
tab_pro <- prop.table(tab) * 100
round(tab_pro, digits = 2) # arredondando para duas casas decimais
# criando tabela cruzada de frenquência entre FUEL e STATUS
tab1 <- table(df$FUEL, df$STATUS)
tab1
# tabela cruzada de frenquência entre FUEL e STATUS
tab_pro1 <- prop.table(tab1) * 100
round(tab_pro1, digits = 2) # arredondando para duas casas decimais
# Plot - 1
plot1 <- ggplot(df, aes(x = DISTANCE, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Distância", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Distância")
plot1
# Plot - 2
plot2 <- ggplot(df, aes(x = AIRFLOW, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Fluxo de Ar", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Fluxo de Ar")
plot2
# Plot - 3
plot3 <- ggplot(df, aes(x = FREQUENCY, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Frequência (Hz)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Frequência (Hz)")
plot3
# 6.
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.3) +
labs(x = "Frequência (Hz)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Frequência (Hz)")
ggplot(df, aes(x = FREQUENCY, y = AIRFLOW, color = FUEL, shape = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(1, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
matrizcorr <- cor(df[,num])
matriz_melt <- melt(matrizcorr)
# Definir cores personalizadas
colors <- c("#FFFFFF", "#FF0000")  # Branco e Vermelho
# Plotar o heatmap com texto
ggplot(matriz_melt, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradientn(colors = colors, limits = c(-1, 1), breaks = seq(-1, 1, by = 0.2)) +
labs(x = "Variável 2", y = "Variável 1", title = "Heatmap de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 10),
legend.position = "right")
# Verificando as classes da variáveis de df
str(df)
# Label Encoding
# Criando a codificação categórica
# Transformando a coluna em números
df$FUEL1 <- recode(df$FUEL,
"gasoline" = 1,
"kerosene" = 2,
"thinner" = 3,
"glp" = 4)
View(df)
# Padronização da variáveis numéricas
# Aplicando padronização às variáveis numéricas
df[, num] <- scale(df[, num])
View(df)
rm(list = ls())
# Pacotes utilizados
library(readxl)
library(ggplot2)
library(reshape2)
library(dplyr)
# Carregando dataset
df <- read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx")
# Verificando a existência de valores NA em df
any(is.na(df)) # Não foi encontrado valores NA em df
# Verificando as classes da variáveis de df
str(df)
# Vetor com os nomes das variáveis a serem convertidas
vetores <- c("SIZE", "STATUS", "FUEL")
# Loop para converter os vetores para a classe "factor"
for (vetor in vetores) {
df[[vetor]] <- as.factor(df[[vetor]])
}
# Verificando as classes da variáveis de df
str(df)
# Selecionando variáveis catégoricas
cat <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
# Selecionando numéricas
num <- names(df)[sapply(df, is.numeric)]
# histograma - Airflow
ggplot(df, aes(x = AIRFLOW)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(x = "Valores", y = "Frequência") +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
)+
ggtitle("Histograma AirFlow")
# histograma - Desibel
ggplot(df, aes(x = DESIBEL)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(x = "Valores", y = "Frequência") +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
)+
ggtitle("Histograma Desibel")
# criando tabela cruzada de frenquência entre SIZE e STATUS
tab <- table(df$SIZE, df$STATUS)
addmargins(tab)
# tabela cruzada de frenquência entre SIZE e STATUS
tab_pro <- prop.table(tab) * 100
round(tab_pro, digits = 2) # arredondando para duas casas decimais
# criando tabela cruzada de frenquência entre FUEL e STATUS
tab1 <- table(df$FUEL, df$STATUS)
tab1
# tabela cruzada de frenquência entre FUEL e STATUS
tab_pro1 <- prop.table(tab1) * 100
round(tab_pro1, digits = 2) # arredondando para duas casas decimais
# Plot - 1
plot1 <- ggplot(df, aes(x = DISTANCE, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Distância", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Distância")
plot1
# Plot - 2
plot2 <- ggplot(df, aes(x = AIRFLOW, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Fluxo de Ar", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Fluxo de Ar")
plot2
# Plot - 3
plot3 <- ggplot(df, aes(x = FREQUENCY, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Frequência (Hz)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Frequência (Hz)")
plot3
# 6.
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.3) +
labs(x = "Frequência (Hz)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Frequência (Hz)")
ggplot(df, aes(x = FREQUENCY, y = AIRFLOW, color = FUEL, shape = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(1, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
matrizcorr <- cor(df[,num])
matriz_melt <- melt(matrizcorr)
# Definir cores personalizadas
colors <- c("#FFFFFF", "#FF0000")  # Branco e Vermelho
# Plotar o heatmap com texto
ggplot(matriz_melt, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradientn(colors = colors, limits = c(-1, 1), breaks = seq(-1, 1, by = 0.2)) +
labs(x = "Variável 2", y = "Variável 1", title = "Heatmap de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 10),
legend.position = "right")
# Label Encoding
# Criando a codificação categórica
# Transformando a coluna em números
df$FUEL <- recode(df$FUEL,
"gasoline" = 1,
"kerosene" = 2,
"thinner" = 3,
"glp" = 4)
# Padronização da variáveis numéricas
df[, num] <- scale(df[, num])
library(randomForest)
library(caret)
library(lattice)
library(caret)
View(df)
# variáveis importantes de acordo com o RF
var_importance <- randomForest(STATUS ~ . ,
data = df,
ntree = 100, nodesize = 10,
importance = TRUE)
# variáveis importantes de acordo com o RF
modelo <- randomForest(STATUS ~ . ,
data = df,
ntree = 100, nodesize = 10,
importance = TRUE)
any(is.na(df))
View(df)
sum(is.na(df))
sum(is.na(df$SIZE))
sum(is.na(df$FUEL))
rm(list = ls())
# Pacotes utilizados
library(readxl)
library(ggplot2)
library(reshape2)
library(dplyr)
library(randomForest)
library(lattice)
library(caret)
# Carregando dataset
df <- read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx")
# Verificando a existência de valores NA em df
any(is.na(df)) # Não foi encontrado valores NA em df
# Verificando as classes da variáveis de df
str(df)
# Vetor com os nomes das variáveis a serem convertidas
vetores <- c("SIZE", "STATUS", "FUEL")
# Loop para converter os vetores para a classe "factor"
for (vetor in vetores) {
df[[vetor]] <- as.factor(df[[vetor]])
}
# Verificando as classes da variáveis de df
str(df)
# Selecionando variáveis catégoricas
cat <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
# Selecionando numéricas
num <- names(df)[sapply(df, is.numeric)]
# histograma - Airflow
ggplot(df, aes(x = AIRFLOW)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(x = "Valores", y = "Frequência") +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
)+
ggtitle("Histograma AirFlow")
# histograma - Desibel
ggplot(df, aes(x = DESIBEL)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(x = "Valores", y = "Frequência") +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
)+
ggtitle("Histograma Desibel")
# criando tabela cruzada de frenquência entre SIZE e STATUS
tab <- table(df$SIZE, df$STATUS)
addmargins(tab)
# tabela cruzada de frenquência entre SIZE e STATUS
tab_pro <- prop.table(tab) * 100
round(tab_pro, digits = 2) # arredondando para duas casas decimais
# criando tabela cruzada de frenquência entre FUEL e STATUS
tab1 <- table(df$FUEL, df$STATUS)
tab1
# tabela cruzada de frenquência entre FUEL e STATUS
tab_pro1 <- prop.table(tab1) * 100
round(tab_pro1, digits = 2) # arredondando para duas casas decimais
# Plot - 1
plot1 <- ggplot(df, aes(x = DISTANCE, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Distância", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Distância")
plot1
# Plot - 2
plot2 <- ggplot(df, aes(x = AIRFLOW, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Fluxo de Ar", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Fluxo de Ar")
plot2
# Plot - 3
plot3 <- ggplot(df, aes(x = FREQUENCY, fill = STATUS)) +
geom_density(alpha = 0.5) +
labs(x = "Frequência (Hz)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Frequência (Hz)")
plot3
# 6.
ggplot(df, aes(x = DESIBEL, fill = STATUS)) +
geom_density(alpha = 0.3) +
labs(x = "Frequência (Hz)", y = "Densidade", fill = "Status") +
scale_fill_manual(values = c("red", "blue"), labels = c("Falha", "Sucesso")) +
theme_minimal() +
theme(
panel.border = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
ggtitle("Distribuição de Sucesso e Falha por Frequência (Hz)")
ggplot(df, aes(x = FREQUENCY, y = AIRFLOW, color = FUEL, shape = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(1, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
matrizcorr <- cor(df[,num])
matriz_melt <- melt(matrizcorr)
# Definir cores personalizadas
colors <- c("#FFFFFF", "#FF0000")  # Branco e Vermelho
# Plotar o heatmap com texto
ggplot(matriz_melt, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradientn(colors = colors, limits = c(-1, 1), breaks = seq(-1, 1, by = 0.2)) +
labs(x = "Variável 2", y = "Variável 1", title = "Heatmap de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 10),
legend.position = "right")
# Label Encoding
# Criando a codificação categórica
unique(df$FUEL)
# Transformando a coluna em números
df$FUEL <- recode(df$FUEL,
"gasoline" = 1,
"kerosene" = 2,
"thinner" = 3,
"lpg" = 4)
# Padronização da variáveis numéricas
df[, num] <- scale(df[, num])
# variáveis importantes de acordo com o RF
modelo <- randomForest(STATUS ~ . ,
data = df,
ntree = 100, nodesize = 10,
importance = TRUE)
varImpPlot(modelo)
indice_treinamento <- createDataPartition(df$FUEL, p = 0.7, list = FALSE)
dados_treinamento <- df[indice_treinamento,]
dados_teste <- df[-indice_treinamento,]
# Treinar o modelo de regressão logística
modelo <- train(STATUS ~ .,
data = dados_treinamento,
method = "glm",
family = "binomial")
modelo
# Fazer previsões nos dados de teste
previsoes <- predict(modelo, newdata = dados_teste)
confusionMatrix(previsoes, dados_teste$classe)$overall['Accuracy']
confusionMatrix(previsoes, dados_teste$STATUS)$overall['Accuracy']
confusionMatrix(previsoes, dados_teste$STATUS)
