setwd("C:/Users/ALEILSON/Documents/github/Machine_Learning/Projeto 3 - Prevendo a Eficiência de Extintores de Incêndio/Acoustic_Extinguisher_Fire_Dataset")
getwd()
# Pacotes utilizados
library(readxl)
# Carregando dataset
df_ext <- read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx")
View(df_ext)
# Carregando dataset
df <- read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx")
any(is.na(df))
sum(is.na(df))
discribe(df)
describe(df)
# Verificando
str(df)
View(df)
# Loop para converter os vetores para a classe "factor"
for (vetor in vetores) {
df[[vetor]] <- as.factor(df[[vetor]])
}
vetores <- c("SIZE", "STATUS")
df[[vetor]] <- as.factor(df[[vetor]])
# Loop para converter os vetores para a classe "factor"
for (vetor in vetores) {
df[[vetor]] <- as.factor(df[[vetor]])
}
# Vetor com os nomes das variáveis a serem convertidas
vetores <- c("SIZE", "STATUS")
for (vetor in vetores) {
df[[vetor]] <- as.factor(df[[vetor]])
}
# Verificando as classes da variáveis de df
str(df)
# Verificando as classes da variáveis de df
str(df)
rm(df_ext)
# Selecioando variáveis catégoricas
cat <- sapply(df, is.factor)
cat
rm(list = ls())
# Definindo diretório de trabalho
setwd("C:/Users/ALEILSON/Documents/github/Machine_Learning/
Projeto 3 - Prevendo a Eficiência de Extintores de Incêndio/
Acoustic_Extinguisher_Fire_Dataset")
# Pacotes utilizados
library(readxl)
# Carregando dataset
df <- read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx")
# Verificando a existência de valores NA em df
any(is.na(df)) # Não foi encontrado valores NA em df
# Verificando as classes da variáveis de df
str(df)
# Vetor com os nomes das variáveis a serem convertidas
vetores <- c("SIZE", "STATUS")
# Loop para converter os vetores para a classe "factor"
for (vetor in vetores) {
df[[vetor]] <- as.factor(df[[vetor]])
}
# Verificando as classes da variáveis de df
str(df)
# Selecionando variáveis catégoricas
variaveis_categoricas <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
variaveis_categoricas
# Exibir os rótulos das variáveis categóricas
labels <- colnames(df)[sapply(df, is.factor) | sapply(df, is.character)]
labels
# Selecionando variáveis catégoricas
cat <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
rm(c("lavels", "variaveis_categoricas"))
rm(c("labels", "variaveis_categoricas"))
rm("labels", "variaveis_categoricas")
str(df)
# Selecionando numéricas
num <- names(df)[sapply(df, is.numeric)]
num
table(df$SIZE, df$SIZE)
pro.table(df$SIZE, df$SIZE)
prop.table(df$SIZE, df$SIZE)
table(df$SIZE)
# ANÁLISE EXPLORATÓRIA DOS DADOS
prop.table(df$SIZE) * 100
table(df$SIZE, df$STATUS)
# ANÁLISE EXPLORATÓRIA DOS DADOS
prop.table(df$SIZE, df$STATUS) * 100
tab <- table(df$SIZE, df$STATUS)
model_table <- prop.table(tab) * 100
model_table
round(model_table, digits = 1)
tab <- table(df$SIZE, df$STATUS)
# criando tabela cruzada de frenquência entre SIZE e STATUS
tab <- table(df$SIZE, df$STATUS)
# tabela cruzada de frenquência entre SIZE e STATUS
tab_pro <- prop.table(tab) * 100
tab_pro
round(tab_pro, digits = 2)
tab
addmargins(tab)
tab1 <- table(df$FUEL, df$STATUS)
addmargins(tab1)
tab_pro1 <- prop.table(tab1) * 100
round(tab_pro1, digits = 2)
str(df)
# Plotar gráfico de dispersão entre airflow e distancia
plot(df$airflow, df$distancia,
col = as.factor(df$FUEL), pch = as.factor(df$SIZE),
xlab = "Airflow", ylab = "Distancia",
main = "Gráfico de Dispersão")
plot(df$airflow, df$distancia,
col = as.factor(df$FUEL), pch = as.factor(df$SIZE))
# Plotar gráfico de dispersão entre airflow e distancia
plot(df$airflow, df$distancia,
col = as.factor(df$FUEL), pch = as.factor(df$SIZE))
# Plotar gráfico de dispersão entre airflow e distancia
plot(df$AIRFLOW, df$DISTANCE,
col = as.factor(df$FUEL), pch = as.factor(df$SIZE),
xlab = "Airflow", ylab = "Distancia",
main = "Gráfico de Dispersão")
# Plotar gráfico de dispersão entre airflow e distancia
plot(df$AIRFLOW, df$DISTANCE,
col = as.factor(df$FUEL), pch = as.factor(df$SIZE),
xlab = "Airflow", ylab = "Distancia",
main = "Gráfico de Dispersão")
plot(df$AIRFLOW, df$DISTANCE,
col = as.factor(df$FUEL),
xlab = "Airflow", ylab = "Distancia",
main = "Gráfico de Dispersão")
# Plotar gráfico de dispersão entre airflow e distancia
plot(df$AIRFLOW, df$DISTANCE,
col = as.factor(df$FUEL), pch = as.factor(df$SIZE),
xlab = "Airflow", ylab = "Distancia",
main = "Gráfico de Dispersão")
# Plotar gráfico de dispersão entre airflow e distancia
plot(df$AIRFLOW, df$DISTANCE,
pch = as.factor(df$SIZE),
xlab = "Airflow", ylab = "Distancia",
main = "Gráfico de Dispersão")
# Plotar gráfico de dispersão entre airflow e distancia
library("ggplot")
# Plotar gráfico de dispersão entre airflow e distancia
library("ggplot2")
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, color = FUEL, shape = SIZE)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, color = FUEL)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
str(df)
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, color = STATUS)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
rm(list = ls())
# Definindo diretório de trabalho
setwd("C:/Users/ALEILSON/Documents/github/Machine_Learning/
Projeto 3 - Prevendo a Eficiência de Extintores de Incêndio/
Acoustic_Extinguisher_Fire_Dataset")
# Verificando diretório de trabalho
getwd()
# Pacotes utilizados
library(readxl)
# Carregando dataset
df <- read_xlsx("Acoustic_Extinguisher_Fire_Dataset.xlsx")
# Verificando a existência de valores NA em df
any(is.na(df)) # Não foi encontrado valores NA em df
# Verificando as classes da variáveis de df
str(df)
# Vetor com os nomes das variáveis a serem convertidas
vetores <- c("SIZE", "STATUS", "FUEL")
# Loop para converter os vetores para a classe "factor"
for (vetor in vetores) {
df[[vetor]] <- as.factor(df[[vetor]])
}
# Verificando as classes da variáveis de df
str(df)
# Selecionando variáveis catégoricas
cat <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
# Selecionando numéricas
num <- names(df)[sapply(df, is.numeric)]
# criando tabela cruzada de frenquência entre SIZE e STATUS
tab <- table(df$SIZE, df$STATUS)
addmargins(tab)
# tabela cruzada de frenquência entre SIZE e STATUS
tab_pro <- prop.table(tab) * 100
round(tab_pro, digits = 2) # arredondando para duas casas decimais
# criando tabela cruzada de frenquência entre FUEL e STATUS
tab1 <- table(df$FUEL, df$STATUS)
# tabela cruzada de frenquência entre FUEL e STATUS
tab_pro1 <- prop.table(tab1) * 100
round(tab_pro1, digits = 2) # arredondando para duas casas decimais
# Plotar gráfico de dispersão entre airflow e distancia
library("ggplot2")
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, color = FUEL)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
str(df)
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, color = SIZE)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, color = FUEL)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, shape = SIZE)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, shape = STATUS)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, color = FUEL, shape = STATUS)) +
geom_point() +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DISTANCE, color = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(1, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
str(df)
ggplot(df, aes(x = AIRFLOW, y = DESIBEL, color = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(1, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DESIBEL, color = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(1, 20)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DESIBEL, color = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(5, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DESIBEL, color = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(10, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DESIBEL, color = FUEL)) +
geom_point(size = 10) +
scale_size(range = c(1, 40)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DESIBEL, color = FUEL, shape = FUEL)) +
geom_point(size = 5) +
scale_size(range = c(1, 40)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
ggplot(df, aes(x = AIRFLOW, y = DESIBEL, color = FUEL, shape = FUEL)) +
geom_point(size = 5) +
scale_size(range = c(1, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
str(df)
ggplot(df, aes(x = FREQUENCY, y = DESIBEL, color = FUEL, shape = FUEL)) +
geom_point(size = 5) +
scale_size(range = c(1, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
# Calcula a matriz de correlação
cor_matrix <- cor(df[[num]])
# Calcula a matriz de correlação
cor_matrix <- cor(df[[,num]])
# Calcula a matriz de correlação
cor_matrix <- cor(df[,num])
# Plotar o heatmap de correlação
heatmap(cor_matrix,
cmap = colorRampPalette(c("#7F0000", "#FFFFFF", "#00007F")),
main = "Heatmap de Correlação")
# Calcula a matriz de correlação
matrizcorr <- cor(df[,num])
matriz_melt <- melt(matrizcorr)
melt
melt
# Calcula a matriz de correlação
library(reshape2)
matrizcorr <- cor(df[,num])
matriz_melt <- melt(matrizcorr)
ggplot(matriz_melt, aes(Var2, Var1, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradient2(low = "white", high = "red", midpoint = 0) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = FREQUENCY, y = AIRFLOW, color = FUEL, shape = FUEL)) +
geom_point(size = 3) +
scale_size(range = c(1, 10)) +
labs(x = "Airflow", y = "Distancia", title = "Gráfico de Dispersão")
# Definir cores personalizadas
colors <- c("#FFFFFF", "#FF0000")  # Branco e Vermelho
# Plotar o heatmap com texto
ggplot(matriz_melt, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
scale_fill_gradientn(colors = colors, limits = c(-1, 1), breaks = seq(-1, 1, by = 0.2)) +
labs(x = "Variável 2", y = "Variável 1", title = "Heatmap de Correlação") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 10),
legend.position = "right")
